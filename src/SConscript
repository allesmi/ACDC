Import('env')

#TODO: automatically detect allocators and create proper environments
allocator_dir = '../allocators'

for config in ['optimal', 'ptmalloc2', 'ptmalloc3', 'tcmalloc', 'jemalloc', 'tbb', 'llalloc', 'hoard', 'streamflow']:
	e = env.Clone()

	if config == 'optimal':
		e.Append(CPPFLAGS=['-DOPTIMAL_MODE'])
		e.Append(CPPFLAGS=['-DALLOCATOR=optimal'])
	if config == 'ptmalloc2':
		e.Append(CPPFLAGS=['-DALLOCATOR=ptmalloc2'])
	if config == 'ptmalloc3':
		e.Append(LIBS=['ptmalloc3'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=ptmalloc3'])
	if config == 'hoard':
		e.Append(LIBS=['hoard'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=hoard'])
	if config == 'tcmalloc':
		e.Append(LIBS=['tcmalloc_minimal'], LIBPATH=['/usr/lib'])
		e.Append(CPPFLAGS=['-DALLOCATOR=tcmalloc'])
	if config == 'jemalloc':
		e.Append(LIBS=['jemalloc'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=jemalloc'])
	if config == 'tbb':
		e.Append(LIBS=['tbbmalloc_proxy', 'tbbmalloc'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=tbb'])
	if config == 'llalloc':
		e.Append(LIBS=['llalloc'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=llalloc'])
	if config == 'hoard':
		e.Append(LIBS=['hoard'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=hoard'])
	if config == 'streamflow':
		e.Append(LIBS=['streamflow'], LIBPATH=[allocator_dir])
		e.Append(CPPFLAGS=['-DALLOCATOR=streamflow'])
	
	object_list = []
	for obj in ['main', 'memory', 'acdc', 'distribution', 'lifetime-class', 'lifetime-size-classes', 'metadata-allocator', 'barrier', 'proc_status']:
		obj_name = obj+"-"+config
		e.Object(obj_name, obj+".c")
		object_list.append(obj_name+".o")

	program_name = "acdc-"+config
	e.Program(program_name, object_list)


