#Dependency check methods
def CheckPKGConfig(context, version):
	context.Message( 'checking for pkg-config...' )
	ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
	context.Result( ret )
	return ret

def CheckPKG(context, name):
	context.Message( 'Checking for %s... ' % name )
	ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
	context.Result( ret )
	return ret



#ACDC
acdc_env = Environment()
acdc_conf = Configure(acdc_env, custom_tests = { 'CheckPKGConfig' : CheckPKGConfig, 'CheckPKG' : CheckPKG })

if not acdc_conf.CheckHeader('pthread.h'):
	print "You need 'pthread.h'. Not Found!"
	Exit(1)
else:
	acdc_conf.env.Append(LIBS=['pthread'])

if not acdc_conf.CheckHeader('math.h'):
	print "You need 'math.h'. Not Found!"
	Exit(1)
else:
	acdc_conf.env.Append(LIBS=['m'])

if not acdc_conf.CheckPKGConfig('0.26'):
	print 'pkg-config >= 0.26 not found.'
	Exit(1)

if not acdc_conf.CheckPKG('glib-2.0 >= 2.32'):
	print 'glib-2.0 >= 2.32 not found'
	Exit(1)


acdc_env = acdc_conf.Finish()

acdc_env.ParseConfig('pkg-config --cflags --libs glib-2.0')
acdc_env.Append(LIBS=['pthread'])
acdc_env.Append(CPPFLAGS=['-O3', '-Wall', '-Werror'])
#acdc_env.Program('acdc', ['main.c', 'memory.c', 'acdc.c', 'distribution.c', 'collections.c'])


for config in ['optimal', 'ptmalloc2', 'ptmalloc3', 'hoard', 'tcmalloc', 'jemalloc', 'tbb', 'llalloc']:
	e = acdc_env.Clone()

	if config == 'optimal':
		e.Append(CPPFLAGS=['-DOPTIMAL_MODE'])
		e.Append(CPPFLAGS=['-DALLOCATOR=optimal'])
	if config == 'ptmalloc2':
		e.Append(CPPFLAGS=['-DALLOCATOR=ptmalloc2'])
	if config == 'ptmalloc3':
		e.Append(LIBS=['ptmalloc3'], LIBPATH=['../allocators'])
		e.Append(CPPFLAGS=['-DALLOCATOR=ptmalloc3'])
	if config == 'hoard':
		e.Append(LIBS=['hoard'], LIBPATH=['../allocators'])
		e.Append(CPPFLAGS=['-DALLOCATOR=hoard'])
	if config == 'tcmalloc':
		#if not e.CheckLib('tcmalloc_minimal'):
		#	print 'tcmalloc_minimal not found'
		#	Exit(1)
		e.Append(LIBS=['tcmalloc_minimal'], LIBPATH=['/usr/lib'])
		e.Append(CPPFLAGS=['-DALLOCATOR=tcmalloc'])
	if config == 'jemalloc':
		e.Append(LIBS=['jemalloc'], LIBPATH=['../allocators'])
		e.Append(CPPFLAGS=['-DALLOCATOR=jemalloc'])
	if config == 'tbb':
		e.Append(LIBS=['tbbmalloc_proxy', 'tbbmalloc'], LIBPATH=['../allocators'])
		e.Append(CPPFLAGS=['-DALLOCATOR=tbb'])
	if config == 'llalloc':
		e.Append(LIBS=['llalloc'], LIBPATH=['../allocators'])
		e.Append(CPPFLAGS=['-DALLOCATOR=llalloc'])

	object_list = []
	for obj in ['main', 'memory', 'acdc', 'distribution', 'collections', 'false-sharing', 'barrier']:
		e.Object(obj+"-"+config, obj+".c")
		object_list.append(obj+"-"+config+".o")

	e.Program("acdc-"+config, object_list)


# Test programs
#test_env = acdc_env.Clone()
#test_env.Program('test-1', ['test-1.c', 'collections.c', 'memory.c', 'acdc.c', 'distribution.c', 'false-sharing.c'])
